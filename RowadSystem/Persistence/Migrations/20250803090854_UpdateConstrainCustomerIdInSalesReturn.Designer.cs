// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RowadSystem.Persistence;

#nullable disable

namespace RowadSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250803090854_UpdateConstrainCustomerIdInSalesReturn")]
    partial class UpdateConstrainCustomerIdInSalesReturn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permissions",
                            ClaimValue = "User:Read",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permissions",
                            ClaimValue = "User:Add",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permissions",
                            ClaimValue = "User:Update",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permissions",
                            ClaimValue = "Role:Read",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permissions",
                            ClaimValue = "Role:Add",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permissions",
                            ClaimValue = "Role:Update",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2fe9d316-b5b7-40e9-9c54-23114c21145c",
                            RoleId = "0abbc730-72e4-4a94-b148-4a209a7a42df"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasFilter("[SupplierId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RowadSystem.Entity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0abbc730-72e4-4a94-b148-4a209a7a42df",
                            ConcurrencyStamp = "cf0ae0be-8cf4-4d95-9859-aa8aeb1c1b28",
                            IsActive = true,
                            IsDefault = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "285d1eac-540c-4d29-926d-c16e5f0ce16e",
                            ConcurrencyStamp = "7c2a18d3-b67b-475a-a61b-b33ec59a1df0",
                            IsActive = true,
                            IsDefault = true,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("RowadSystem.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2fe9d316-b5b7-40e9-9c54-23114c21145c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2abe47a7-c357-438a-9a5f-f946450539ec",
                            CreatedAt = new DateTime(2025, 8, 3, 9, 8, 53, 355, DateTimeKind.Utc).AddTicks(8787),
                            Email = "admin@rowad-system.com",
                            EmailConfirmed = true,
                            FirstName = "Rowad",
                            IsDeleted = false,
                            LastName = "System",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ROWAD-SYSTEM.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECPifqZZYi8bMWnHhtx/ZhCGFjAPfnbxlEH4d94qppbiOZlPypPwlJXVl/BYH7KW6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "751627060C04458D99227FC3B20B5924",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("RowadSystem.Entity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("RowadSystem.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RowadSystem.Entity.ContactNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("contactNumbers");
                });

            modelBuilder.Entity("RowadSystem.Entity.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("RowadSystem.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RowadSystem.Entity.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("RowadSystem.Entity.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("RowadSystem.Entity.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RowadSystem.Entity.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceDetails", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RowadSystem.Entity.OTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OTP");
                });

            modelBuilder.Entity("RowadSystem.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RowadSystem.Entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RowadSystem.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RowadSystem.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RowadSystem.Entity.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("RowadSystem.Entity.ProductUnit", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBaseUnit")
                        .HasColumnType("bit");

                    b.Property<int>("QuantityInBaseUnit")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductUnits");
                });

            modelBuilder.Entity("RowadSystem.Entity.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShoppingCartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("RowadSystem.Entity.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("UnitId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("RowadSystem.Entity.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RowadSystem.Entity.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseInvoice", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.Invoice");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseInvoices", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseReturn", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.Invoice");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseReturns", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesInvoice", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.Invoice");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("SalesInvoices", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesReturnInvoice", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.Invoice");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesInvoiceId");

                    b.ToTable("SalesReturns", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseInvoiceDetail", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.InvoiceDetail");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceDetails", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseReturnDetail", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.InvoiceDetail");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseReturnDetails", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesInvoiceDetail", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.InvoiceDetail");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("SalesInvoiceId");

                    b.ToTable("SalesInvoiceDetails", (string)null);
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesReturnInvoiceDetail", b =>
                {
                    b.HasBaseType("RowadSystem.Entity.InvoiceDetail");

                    b.Property<int>("SalesReturnId")
                        .HasColumnType("int");

                    b.HasIndex("SalesReturnId");

                    b.ToTable("SalesReturnDetails", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RowadSystem.Entity.Address", b =>
                {
                    b.HasOne("RowadSystem.Entity.Customer", "Customer")
                        .WithOne("Address")
                        .HasForeignKey("RowadSystem.Entity.Address", "CustomerId");

                    b.HasOne("RowadSystem.Entity.Supplier", "Supplier")
                        .WithOne("Address")
                        .HasForeignKey("RowadSystem.Entity.Address", "SupplierId");

                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithOne("Address")
                        .HasForeignKey("RowadSystem.Entity.Address", "UserId");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.ApplicationUser", b =>
                {
                    b.OwnsMany("RowadSystem.Entity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expiration")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("RowadSystem.Entity.ContactNumber", b =>
                {
                    b.HasOne("RowadSystem.Entity.Customer", "Customer")
                        .WithMany("ContactNumbers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RowadSystem.Entity.Supplier", "Supplier")
                        .WithMany("ContactNumbers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithMany("ContactNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.Inventory", b =>
                {
                    b.HasOne("RowadSystem.Entity.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("RowadSystem.Entity.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RowadSystem.Entity.Invoice", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.InvoiceDetail", b =>
                {
                    b.HasOne("RowadSystem.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Unit", "Unit")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UnitId");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RowadSystem.Entity.OTP", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithMany("Otp")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.Order", b =>
                {
                    b.HasOne("RowadSystem.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.OrderItem", b =>
                {
                    b.HasOne("RowadSystem.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Unit", "Unit")
                        .WithMany("OrderItems")
                        .HasForeignKey("UnitId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RowadSystem.Entity.Payment", b =>
                {
                    b.HasOne("RowadSystem.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("RowadSystem.Entity.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.Product", b =>
                {
                    b.HasOne("RowadSystem.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("RowadSystem.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId");

                    b.HasOne("RowadSystem.Entity.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RowadSystem.Entity.ProductImage", b =>
                {
                    b.HasOne("RowadSystem.Entity.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RowadSystem.Entity.ProductUnit", b =>
                {
                    b.HasOne("RowadSystem.Entity.Product", "Product")
                        .WithMany("productUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Unit", "Unit")
                        .WithMany("productUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RowadSystem.Entity.ShoppingCart", b =>
                {
                    b.HasOne("RowadSystem.Entity.ApplicationUser", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RowadSystem.Entity.ShoppingCartItem", b =>
                {
                    b.HasOne("RowadSystem.Entity.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.ShoppingCart", "ShoppingCart")
                        .WithMany("shoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseInvoice", b =>
                {
                    b.HasOne("RowadSystem.Entity.Invoice", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.PurchaseInvoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseReturn", b =>
                {
                    b.HasOne("RowadSystem.Entity.Invoice", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.PurchaseReturn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesInvoice", b =>
                {
                    b.HasOne("RowadSystem.Entity.Coupon", "Coupon")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CouponId");

                    b.HasOne("RowadSystem.Entity.Customer", "Customer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("RowadSystem.Entity.Invoice", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.SalesInvoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("RowadSystem.Entity.SalesInvoice", "OrderId");

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesReturnInvoice", b =>
                {
                    b.HasOne("RowadSystem.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("RowadSystem.Entity.Invoice", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.SalesReturnInvoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesReturnInvoices")
                        .HasForeignKey("SalesInvoiceId");

                    b.Navigation("Customer");

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseInvoiceDetail", b =>
                {
                    b.HasOne("RowadSystem.Entity.InvoiceDetail", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.PurchaseInvoiceDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("purchaseInvoiceDetails")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseReturnDetail", b =>
                {
                    b.HasOne("RowadSystem.Entity.InvoiceDetail", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.PurchaseReturnDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesInvoiceDetail", b =>
                {
                    b.HasOne("RowadSystem.Entity.InvoiceDetail", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.SalesInvoiceDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceDetails")
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesInvoice");
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesReturnInvoiceDetail", b =>
                {
                    b.HasOne("RowadSystem.Entity.InvoiceDetail", null)
                        .WithOne()
                        .HasForeignKey("RowadSystem.Entity.SalesReturnInvoiceDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RowadSystem.Entity.SalesReturnInvoice", "SalesReturn")
                        .WithMany("salesReturnInvoiceDetails")
                        .HasForeignKey("SalesReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesReturn");
                });

            modelBuilder.Entity("RowadSystem.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactNumbers");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Otp");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("RowadSystem.Entity.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RowadSystem.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RowadSystem.Entity.Coupon", b =>
                {
                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("RowadSystem.Entity.Customer", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactNumbers");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("RowadSystem.Entity.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RowadSystem.Entity.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RowadSystem.Entity.Order", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RowadSystem.Entity.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Inventory");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("productUnits");
                });

            modelBuilder.Entity("RowadSystem.Entity.ShoppingCart", b =>
                {
                    b.Navigation("shoppingCartItems");
                });

            modelBuilder.Entity("RowadSystem.Entity.Supplier", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("ContactNumbers");

                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("RowadSystem.Entity.Unit", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("OrderItems");

                    b.Navigation("productUnits");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseReturns");

                    b.Navigation("purchaseInvoiceDetails");
                });

            modelBuilder.Entity("RowadSystem.Entity.PurchaseReturn", b =>
                {
                    b.Navigation("PurchaseReturnDetails");
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesInvoice", b =>
                {
                    b.Navigation("SalesInvoiceDetails");

                    b.Navigation("SalesReturnInvoices");
                });

            modelBuilder.Entity("RowadSystem.Entity.SalesReturnInvoice", b =>
                {
                    b.Navigation("salesReturnInvoiceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
